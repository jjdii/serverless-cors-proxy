service: ${file(./../../constants.yml):NAME}-proxy-service

# endpoints
functions:
  proxyRequest:
    handler: handler.proxyRequest
    events:
      - http:
          path: proxy
          method: post
          cors: true
      - schedule:
          name: ${file(./../../constants.yml):NAME}-proxyRequest-${opt:stage, 'dev'}
          rate: ${file(./../../constants.yml):AWS_WARMUP_RATE}
          enabled: true
          input:
            warmup: true

# config
provider:
  name: aws
  runtime: ${file(./../../constants.yml):NODE_VERSION}
  stage: ${opt:stage, 'dev'}
  role: ${file(./../../serverless.env.yml):AWS_ROLE}
  memorySize: ${file(./../../constants.yml):AWS_MEMORY}
  timeout: ${file(./../../constants.yml):AWS_TIMEOUT}
  apiGateway:
    restApiId: ${file(./../../serverless.env.yml):AWS_API_ID_${self:custom.environments.${self:provider.stage}}}
    restApiRootResourceId: ${file(./../../serverless.env.yml):AWS_API_ROOT_ID_${self:custom.environments.${self:provider.stage}}}
  environment:
    STAGE: ${self:provider.stage}

plugins:
  - serverless-webpack

custom:
  environments:
    dev: DEV
    prod: PROD
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'npm'
